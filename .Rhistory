# The function compareDoors takes 2 door choices (represented as integers) as input, doorChoice and doorCar.
# if doorChoice is equal to doorCar, the function returns TRUE. if they're not equal, function returns false.
compareDoors<-function(doorChoice, doorCar){
isSame<-FALSE
if (doorChoice==doorCar){
isSame<-TRUE
}
return(isSame)
}
# To test function,
compareDoors(1,1)   # returns TRUE
compareDoors(1,2)   # returns FALSE
# Part 2: Moving On
# Define a new S4 class door.
setClass(Class="door",
representation = representation (
chosenDoor="numeric",
carDoor="numeric",
switch="logical"
),
prototype = prototype (
chosenDoor=c(),
carDoor=c(),
switch=c()
)
)
# A validation function that checks whether values stored in the slots are appropriately structured.
setValidity("door", function(object){
test1<-(object@chosenDoor==1 | object@chosenDoor==2 | object@chosenDoor==3)
test2<-(object@carDoor==1 | object@carDoor==2 | object@carDoor==3)
test3<-(object@switch==TRUE | object@switch==FALSE)
test<-(test1==TRUE & test2==TRUE & test3==TRUE)
if(test!=TRUE){return("@DoorChoice is not a valid value")}
}
)
# A construction function that allows the user to create a door object
setMethod("initialize", "door",  function(.Object, ...){
value = callNextMethod()
validObject(value)
return(value)
}
)
# Create generic PlayGame
setGeneric("PlayGame", function(object="door"){
standardGeneric("PlayGame")
}
)
# creates PlayGame method for class door
setMethod("PlayGame", "door",
function(object){
winner<-FALSE
object@carDoor<-sample(1:3,1)
firstChosenDoor<-sample(1:3,1)
if (object@switch==FALSE){
object@chosenDoor<-firstChosenDoor
}
if (object@switch==TRUE){
temp<-FALSE
openDoor<-0
while(temp==FALSE){
openDoor<-sample(1:3,1)
if ((openDoor!=object@carDoor)&(openDoor!=firstChosenDoor)){
temp<-TRUE
}
}
if(openDoor==1){
choices<-c(2,3)
} else if (openDoor==2){
choices<-c(1,3)
} else if (openDoor==3){
choices<-c(1,2)
}
object@chosenDoor<-sample(choices,1)
}
if (object@chosenDoor==object@carDoor){
winner<-TRUE
} else {
winner<-FALSE
}
return(winner)
}
)
# Part 3: Simulation
# 1) Simulate 1000 rounds of the game, player does not switch
PlayNoSwitch<-function(i){
p1<-new("door", chosenDoor=1,carDoor=1,switch=F)
result<-PlayGame(p1)
return(result)
}
noSwitch<-sapply(c(1:1000),PlayNoSwitch)
tabNoSwitch<-table(noSwitch)
perctWonNoSwitch<-tabNoSwitch[2]/1000*100
paste("Player who chose not to switch won ", perctWonNoSwitch, "% of the time.")
# 2) simulate 1000 rounds of the game, player does switches
PlayYesSwitch<-function(i){
p1<-new("door", chosenDoor=1,carDoor=1,switch=T)
result<-PlayGame(p1)
return(result)
}
yesSwitch<-sapply(c(1:1000),PlayYesSwitch)
tabYesSwitch<-table(yesSwitch)
perctWonYesSwitch<-tabYesSwitch[2]/1000*100
paste("Player who chose to switch won ", perctWonYesSwitch, "% of the time.")
